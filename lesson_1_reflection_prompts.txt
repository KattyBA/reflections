How did viewing a diff between two versions of a file help you to see the bug that 
was introduced?

     Viewing a diff between two versions of a file help me to see the bug that was introduce more quicly. I'll be able to see only lines with diff, I shouldn't compare eatch line


    



How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

   



What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

   



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    



How can you use the commands git log and git diff to view the history of files?

    



How might using version control make you more confident to make changes that
could break something?

    



Now that you have your workspace set up, what do you want to try using Git for?

    

1. How did viewing a diff between two versions of a file help you see the bug that was introduced? - It allows you to quickly and easily see both files which allows you to spot differences quickly. If you had to look in one file and then open the other you could forget what you had in the first file and it could lead to even more mistakes. 
2. How could having easy access to the entire history of a file make you a more efficient programmer in the long term? - There's many ways this would be helpful. You would be able to look back on these files later on if you ever ran across a problem that you had in a program before, this would allow you to see how you fixed the problem. Also, it would allow you to experiment with the code without the fear of completely losing your progress on the program you're working on.
3. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does? - The pros will be having every commit make sense to the users. It wouldn't allow changes to happen mid line and you are able to manually tag each change in the commit. The con is user error and forgetting to commit or not publishing commits at the right time.
4. Why do you think some version control systems, like Git, allow saving multiple files in one cmmit, while others, like Google Docs, treat each file separately? - I think it's the fact that Google Docs isn't really geared towards code or for people who will be editing multiple files at once. 
5. How can you use the commands git log and git diff to view the history of files? - You can use git log to acutally view the entire history of the file and then git diff will compare two different versions to see what exactly changed in each version.
6. How might using version control make you more confident to make changes that could break something? - It would allow you to make changes without worry. If you did break something you could just go back to the older version and fix it.
7. Now that you have your workspace set up, what do you want to try using Git for? - I would like to use Git for when I start programming programs and writing apps for mobile devices.






what happens when you initialize to create the repository? why do you need to do it




How is the staging area different from the working directiory and the repository? What value do you think if offers
